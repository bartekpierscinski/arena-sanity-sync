// schemas/areNaBlock.js
export default {
  name: 'areNaBlock',
  title: 'Are.na Block',
  type: 'document',
  groups: [
    {
      name: 'basic',
      title: 'Basic Info',
      default: true,
    },
    {
      name: 'channels',
      title: 'Channels',
    },
    {
      name: 'content',
      title: 'Content',
    },
    {
      name: 'sync',
      title: 'Sync & Metadata',
    },
  ],
  fields: [
    {
      name: 'title',
      title: 'Title',
      type: 'string',
      group: 'basic',
      description:
        'The title of the Are.na block. May be user-defined or auto-generated by Are.na.',
    },
    {
      name: 'arenaBlocks',
      title: 'Are.na Block(s)',
      type: 'object',
      fields: [
        {
          name: 'blocks',
          title: 'Blocks',
          type: 'array',
          of: [
            {
              name: 'areNaBlockRef',
              title: 'Are.na Block Reference',
              type: 'reference',
              to: [{type: 'areNaBlock'}],
              options: {
                disableNew: true,
              },
            },
          ],
        },
      ],
    },
    {
      name: 'mainImage',
      title: 'Main Image',
      type: 'image',
      group: 'basic',
    },
    {
      name: 'arenaId',
      title: 'Are.na ID',
      type: 'number',
      readOnly: true,
      validation: (Rule) => Rule.required(),
      description: 'The unique identifier for this block from Are.na.',
    },
    // Replaces deprecated single channel slug with multi-channel membership list
    {
      name: 'channels',
      title: 'Channels',
      type: 'array',
      readOnly: true,
      description: 'All Are.na channels this block currently belongs to.',
      of: [
        {
          type: 'object',
          name: 'channelRef',
          fields: [
            {name: 'slug', type: 'string', title: 'Slug'},
            {name: 'title', type: 'string', title: 'Title'},
          ],
        },
      ],
    },
    {
      name: 'arenaBlockUrl',
      title: 'Are.na Block URL',
      type: 'url',
      readOnly: true,
      description: 'Direct URL to the block on Are.na.',
    },
    {
      name: 'blockType',
      title: 'Block Type',
      type: 'string',
      readOnly: true,
      description: "The type of block, e.g., 'Text', 'Image', 'Link', 'Media', 'Attachment'.",
    },
    {
      name: 'description',
      title: 'Description',
      type: 'text',
      description:
        "The description associated with the block (often from Are.na's description_html field).",
      hidden: ({document}) =>
        !document?.description &&
        !['Link', 'Image', 'Media', 'Attachment'].includes(document?.blockType),
    },
    {
      name: 'tags',
      title: 'Tags',
      type: 'array',
      of: [{type: 'string'}],
      options: {
        layout: 'tags',
      },
      group: 'basic',
      description: 'Tags to categorize and organize this Are.na block.',
    },
    {
      name: 'contentHtml',
      title: 'Content HTML (for Text blocks)',
      type: 'text',
      description: "The HTML content of the block, primarily for 'Text' blocks.",
      hidden: ({document}) => document?.blockType !== 'Text',
    },
    {
      name: 'imageUrl',
      title: 'Image URL (for Image/Link blocks)',
      type: 'url',
      description: "URL for the main image associated with 'Image' or 'Link' blocks.",
      hidden: ({document}) =>
        !['Image', 'Link'].includes(document?.blockType) || !document?.imageUrl,
    },
    // New canonical external image URL fields used by the sync script (kept separate to avoid clobbering historic data in imageUrl/imageThumbUrl)
    {
      name: 'externalImageUrl',
      title: 'External Image URL',
      type: 'url',
      readOnly: true,
      description: 'Raw image URL from Are.na (display/original).',
      hidden: ({document}) => !document?.externalImageUrl,
    },
    {
      name: 'externalImageThumbUrl',
      title: 'External Image Thumb URL',
      type: 'url',
      readOnly: true,
      description: 'Thumbnail image URL from Are.na.',
      hidden: ({document}) => !document?.externalImageThumbUrl,
    },
    {
      name: 'imageThumbUrl',
      title: 'Image Thumbnail URL',
      type: 'url',
      description: 'URL for the thumbnail image.',
      hidden: ({document}) =>
        !['Image', 'Link'].includes(document?.blockType) || !document?.imageThumbUrl,
    },
    {
      name: 'sourceUrl',
      title: 'Source URL (for Link blocks)',
      type: 'url',
      description: "The primary URL for 'Link' blocks.",
      hidden: ({document}) => document?.blockType !== 'Link',
    },
    {
      name: 'sourceTitle',
      title: 'Source Title (for Link blocks)',
      type: 'string',
      description: 'The title of the source URL, if available (e.g., webpage title).',
      hidden: ({document}) => document?.blockType !== 'Link' || !document?.sourceTitle,
    },
    {
      name: 'sourceProviderName',
      title: 'Source Provider (for Link blocks)',
      type: 'string',
      description: "The provider or domain of the source URL (e.g., 'youtube.com').",
      hidden: ({document}) => document?.blockType !== 'Link' || !document?.sourceProviderName,
    },
    {
      name: 'arenaCreatedAt',
      title: 'Are.na Created At',
      type: 'datetime',
      readOnly: true,
      description: 'Timestamp of when the block was created on Are.na.',
    },
    {
      name: 'arenaUpdatedAt',
      title: 'Are.na Updated At',
      type: 'datetime',
      readOnly: true,
      description: 'Timestamp of when the block was updated on Are.na.',
    },
    // --- Sync metadata & ownership / locking controls ---
    {
      name: 'arenaImageSignature',
      title: 'Image Signature',
      type: 'string',
      readOnly: true,
      description: 'Hash of original image URL + size for change detection.',
      hidden: ({document}) => !document?.arenaImageSignature,
    },
    {
      name: 'arenaFingerprint',
      title: 'Content Fingerprint',
      type: 'string',
      readOnly: true,
      description: 'Compact hash of core Arena block metadata used to skip unchanged blocks.',
      hidden: ({document}) => !document?.arenaFingerprint,
    },
    {
      name: 'syncPolicy',
      title: 'Sync Policy',
      type: 'object',
      description: 'Controls which system (studio vs arena) owns certain fields.',
      options: {collapsible: true, collapsed: true},
      fields: [
        {
          name: 'owner',
          title: 'Ownership Map',
          type: 'object',
          fields: [
            {name: 'title', type: 'string', description: "Owner of 'title' (studio|arena)"},
            {
              name: 'sourceTitle',
              type: 'string',
              description: "Owner of 'sourceTitle' (studio|arena)",
            },
            {name: 'mainImage', type: 'string', description: 'Owner of mainImage (studio|arena)'},
          ],
        },
      ],
    },
    {
      name: 'lockTitle',
      title: 'Lock Title',
      type: 'boolean',
      description: 'Prevents sync from updating the Title even if Arena changes.',
    },
    {
      name: 'lockAll',
      title: 'Lock All Are.na Updates',
      type: 'boolean',
      description: 'When enabled, no Arena-owned fields will be updated during sync.',
    },
    {
      name: 'lockImage',
      title: 'Lock Main Image',
      type: 'boolean',
      description: 'Prevents sync from replacing mainImage even if Arena image changes.',
    },
    {
      name: 'lastSyncedAt',
      title: 'Last Synced At',
      type: 'datetime',
      readOnly: true,
      description: 'Timestamp of the most recent sync run for this block.',
      hidden: ({document}) => !document?.lastSyncedAt,
    },
    {
      name: 'lastSyncedBy',
      title: 'Last Synced By',
      type: 'string',
      readOnly: true,
      description: 'Agent / process responsible for the last sync (e.g., arena-sync).',
      hidden: ({document}) => !document?.lastSyncedBy,
    },
    {
      name: 'isOrphan',
      title: 'Is Orphan',
      type: 'boolean',
      readOnly: true,
      description: 'True if the block is no longer present in any tracked channels.',
      hidden: ({document}) => !document?.isOrphan,
    },
    {
      name: 'rawArenaData',
      title: 'Raw Are.na Data',
      type: 'object',
      options: {
        collapsible: true,
        collapsed: true,
      },
      fields: [
        // Arena attachment object (video, audio, etc)
        {
          name: 'attachment',
          title: 'Attachment',
          type: 'object',
          fields: [
            {name: 'content_type', type: 'string', title: 'Content Type'},
            {name: 'extension', type: 'string', title: 'Extension'},
            {name: 'file_name', type: 'string', title: 'File Name'},
            {name: 'file_size', type: 'number', title: 'File Size'},
            {name: 'file_size_display', type: 'string', title: 'File Size Display'},
            {name: 'url', type: 'url', title: 'URL'},
          ],
        },
        {name: 'base_class', type: 'string'},
        {name: 'class', type: 'string'},
        {name: 'comment_count', type: 'number'},
        {name: 'connected_at', type: 'datetime'},
        {name: 'connected_by_user_id', type: 'number'},
        {name: 'connected_by_user_slug', type: 'string'},
        {name: 'connected_by_username', type: 'string'},
        {name: 'connection_id', type: 'number'},
        {name: 'content', type: 'text'},
        {name: 'content_html', type: 'text'},
        {name: 'created_at', type: 'datetime'},
        {name: 'description', type: 'text'},
        {name: 'description_html', type: 'text'},
        {name: 'generated_title', type: 'string'},
        {name: 'id', type: 'number'},
        {
          name: 'image',
          title: 'Image',
          type: 'object',
          fields: [
            {name: 'content_type', type: 'string'},
            {
              name: 'display',
              type: 'object',
              fields: [{name: 'url', type: 'url'}],
            },
            {name: 'filename', type: 'string'},
            {
              name: 'large',
              type: 'object',
              fields: [{name: 'url', type: 'url'}],
            },
            {
              name: 'original',
              type: 'object',
              fields: [
                {name: 'file_size', type: 'number'},
                {name: 'file_size_display', type: 'string'},
                {name: 'url', type: 'url'},
              ],
            },
            {
              name: 'square',
              type: 'object',
              fields: [{name: 'url', type: 'url'}],
            },
            {
              name: 'thumb',
              type: 'object',
              fields: [{name: 'url', type: 'url'}],
            },
            {name: 'updated_at', type: 'datetime'},
          ],
        },
        {name: 'position', type: 'number'},
        {name: 'selected', type: 'boolean'},
        {
          name: 'source',
          type: 'object',
          fields: [
            {
              name: 'provider',
              type: 'object',
              fields: [
                {name: 'name', type: 'string'},
                {name: 'url', type: 'string'},
              ],
            },
            {name: 'title', type: 'string'},
            {name: 'url', type: 'url'},
          ],
        },
        {name: 'state', type: 'string'},
        {name: 'title', type: 'string'},
        {name: 'updated_at', type: 'datetime'},
        {
          name: 'user',
          type: 'object',
          fields: [
            {name: 'avatar', type: 'string'},
            {
              name: 'avatar_image',
              type: 'object',
              fields: [
                {name: 'display', type: 'string'},
                {name: 'thumb', type: 'string'},
              ],
            },
            {name: 'badge', type: 'string'},
            {name: 'base_class', type: 'string'},
            {name: 'can_index', type: 'boolean'},
            {name: 'channel_count', type: 'number'},
            {name: 'class', type: 'string'},
            {name: 'created_at', type: 'datetime'},
            {name: 'first_name', type: 'string'},
            {name: 'follower_count', type: 'number'},
            {name: 'following_count', type: 'number'},
            {name: 'full_name', type: 'string'},
            {name: 'id', type: 'number'},
            {name: 'initials', type: 'string'},
            {name: 'is_confirmed', type: 'boolean'},
            {name: 'is_exceeding_connections_limit', type: 'boolean'},
            {name: 'is_lifetime_premium', type: 'boolean'},
            {name: 'is_pending_confirmation', type: 'boolean'},
            {name: 'is_pending_reconfirmation', type: 'boolean'},
            {name: 'is_premium', type: 'boolean'},
            {name: 'is_supporter', type: 'boolean'},
            {name: 'last_name', type: 'string'},
            {
              name: 'metadata',
              type: 'object',
              fields: [{name: 'description', type: 'string'}],
            },
            {name: 'profile_id', type: 'number'},
            {name: 'slug', type: 'string'},
            {name: 'username', type: 'string'},
          ],
        },
        {name: 'visibility', type: 'string'},
      ],
    },
  ],
  preview: {
    select: {
      title: 'title',
      media: 'mainImage',
      blockType: 'blockType',
      firstChannelSlug: 'channels.0.slug',
      sourceUrl: 'sourceUrl',
    },
    prepare(selection) {
      const {title, blockType, firstChannelSlug, media} = selection
      const displaySubtitle = firstChannelSlug ? `${blockType} • ${firstChannelSlug}` : blockType
      return {
        title: title || 'Block',
        subtitle: displaySubtitle,
        media: media,
      }
    },
  },
}
